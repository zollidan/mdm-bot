import asyncio
import datetime
import logging
import os
from typing import List, Optional
from aiogram import F, Bot, Dispatcher
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup
from pydantic_settings import BaseSettings, SettingsConfigDict
from art import tprint

from models import *
from database import *
from kbs import *
from config import settings
from utils import *

logger = logging.getLogger(__name__)
dp = Dispatcher()

# MARK: states
# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞
class SearchForm(StatesGroup):
    vendor_code_search = State()
    name_search = State()
    
# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ñ–æ—Ä–º—ã –ø—Ä–æ—Ñ–∏–ª—è
class ProfileForm(StatesGroup):
    name = State()
    phone = State()
    address = State()

# MARK: /start

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    
    welcome_message = (
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MDM Bot! üéâ\n\n"
        "–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ —Ç–æ–≤–∞—Ä–æ–≤!\n\n"
        "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
        "üîç –ò—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É\n"
        "üõí –î–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É\n"
        "‚≠êÔ∏è –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ç–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n"
        "üì¶ –û—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Ö —Å—Ç–∞—Ç—É—Å\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá"
    )
    
    with Session() as session:
        logger.info(f"User {message.from_user.id} find in db")
        stmt = select(User).where(User.telegram_id == message.from_user.id)
        user = session.scalar(stmt)
        if user is None:
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                name=message.from_user.full_name,
                phone_number="",
                address=""
            )
            session.add(user)
            session.commit()
            logger.info(f"User {message.from_user.id} added to db")
            return await message.answer(welcome_message, reply_markup=main_kb())
        
        cart_count = session.query(CartItem).filter(CartItem.user_id == message.from_user.id).count()
        favorites_count = session.query(Favorite).filter(Favorite.user_id == message.from_user.id).count()
        orders_count = session.query(Orders).filter(Orders.user_id == message.from_user.id).count()
        
        welcome_back_message = (
                f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ MDM Bot!\n\n"
                f"–†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å, {user.name}!\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:\n"
                f"üî∏ –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ: {cart_count}\n"
                f"‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {favorites_count}\n"
                f"üì¶ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {orders_count}\n\n"
                f"–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá"
        )

        return await message.answer(welcome_back_message, reply_markup=main_kb())

# MARK: main_page

@dp.callback_query(F.data == "main_page")
async def main_page(callback: CallbackQuery):
    await callback.answer("")

    try:
        with Session() as session:
            user = session.query(User).filter(User.telegram_id == callback.from_user.id).first()
            cart_count = session.query(CartItem).filter(CartItem.user_id == callback.from_user.id).count()
            favorites_count = session.query(Favorite).filter(Favorite.user_id == callback.from_user.id).count()
            orders_count = session.query(Orders).filter(Orders.user_id == callback.from_user.id).count()

            main_page_text = make_main_page_text(user, cart_count, favorites_count, orders_count)
            
            return await callback.message.edit_text(
                main_page_text, 
                reply_markup=main_kb(),
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return await callback.message.edit_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MDM Store!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá", 
            reply_markup=main_kb()
        )

# MARK: search

@dp.callback_query(F.data == "search")
async def search_handler(callback: CallbackQuery, state: FSMContext) -> None:
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–∏—Å–∫–∞
    search_message = (
        "üîç <b>–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:\n"
        "‚Ä¢ –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞\n"
        "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:"
    )

    await callback.message.answer(
        search_message,
        reply_markup=search_kb(),
        parse_mode="HTML"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    await state.set_state(SearchForm.vendor_code_search)
    await callback.answer("")
        

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
@dp.callback_query(F.data == "search_by_name")
async def search_by_name_handler(callback: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(SearchForm.name_search)
    
    await callback.message.answer(
        "üìù <b>–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:",
        parse_mode="HTML"
    )
    
    await callback.answer("")
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
@dp.message(SearchForm.vendor_code_search)
async def process_vendor_code_search(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    vendor_code = message.text
    
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    
    with Session() as session:
        logger.info(f"User {user_id} search by vendor code: {vendor_code}")
        try:
            stmt = select(Product).where(Product.vendor_code == vendor_code)
            product = session.scalars(stmt).first()
            
            if product is None:
                # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ–≤–∞—Ä–∞
                return await message.answer(
                    "üîç <b>–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                    f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º <code>{vendor_code}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞\n"
                    "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞\n",
                    parse_mode="HTML",
                    reply_markup=product_not_found_kb()
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            fav_stmt = select(Favorite).where(
                Favorite.user_id == user_id,
                Favorite.product_id == product.id
            )
            favorite = session.scalars(fav_stmt).first()
            is_favorite = favorite is not None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            product_info = make_product_card(product)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
            return await message.answer_photo(
                photo=product.image,
                caption=product_info,
                reply_markup=product_kb(product.id, is_fav=is_favorite),
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞: {e}")
            return await message.answer(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
                reply_markup=main_kb()
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
@dp.message(SearchForm.name_search)
async def process_name_search(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    search_term = message.text
    
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    
    with Session() as session:
        logger.info(f"User {user_id} search by name: {search_term}")
        try:
            # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            stmt = select(Product).where(Product.name.ilike(f"%{search_term}%")).limit(5)
            products = session.scalars(stmt).all()
            
            if not products:
                # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
                return await message.answer(
                    "üîç <b>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                    f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É <code>{search_term}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                    "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –æ–±—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
                    "‚Ä¢ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                    parse_mode="HTML",
                    reply_markup=product_not_found_kb()
                )
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –¥–µ—Ç–∞–ª—å–Ω–æ
            if len(products) == 1:
                product = products[0]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                fav_stmt = select(Favorite).where(
                    Favorite.user_id == user_id,
                    Favorite.product_id == product.id
                )
                favorite = session.scalars(fav_stmt).first()
                is_favorite = favorite is not None
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                product_info = make_product_card(product)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
                return await message.answer_photo(
                    photo=product.image,
                    caption=product_info,
                    reply_markup=product_kb(product.id, is_fav=is_favorite),
                    parse_mode="HTML"
                )
            else:
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
                search_results = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´{search_term}¬ª:</b>\n\n"
                
                kb = InlineKeyboardBuilder()

                for i, product in enumerate(products, 1):
                    search_results += (
                        f"{i}. <b>{product.name}</b>\n"
                        f"   –ê—Ä—Ç–∏–∫—É–ª: {product.vendor_code}\n"
                        f"   –¶–µ–Ω–∞: {product.price} —Ä—É–±.\n\n"
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–∞
                    kb.button(
                        text=f"üëÅ –¢–æ–≤–∞—Ä #{i}", 
                        callback_data=f"view_product_{product.id}"
                    )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                kb.button(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search")
                kb.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_page")
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
                kb.adjust(1)
                                
                return await message.answer(
                    search_results,
                    reply_markup=kb.as_markup(),
                    parse_mode="HTML"
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {e}")
            return await message.answer(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
                reply_markup=main_kb()
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
@dp.callback_query(F.data.startswith("view_product_"))
async def view_product_handler(callback: CallbackQuery):
    await callback.answer('')
    product_id = str(callback.data).split("_")[2]
    
    try:
        with Session() as session:
            stmt = select(Product).where(Product.id == product_id)
            product = session.scalars(stmt).first()
            
            if not product:
                await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=main_kb())
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            fav_stmt = select(Favorite).where(
                Favorite.user_id == callback.from_user.id,
                Favorite.product_id == product.id
            )
            favorite = session.scalars(fav_stmt).first()
            is_favorite = favorite is not None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            product_info = make_product_card(product)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
            return await callback.message.answer_photo(
                photo=product.image,
                caption=product_info,
                reply_markup=product_kb(product.id, is_fav=is_favorite),
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç–æ–≤–∞—Ä–∞", 
            reply_markup=main_kb()
        )

# MARK: favorites

@dp.callback_query(F.data == 'favorites')
async def favorites_list(callback: CallbackQuery):
    await callback.answer('')
    user_id: int = callback.from_user.id
    
    try:
        with Session() as session:
            stmt = select(Product, Favorite).join(
                Favorite, Favorite.product_id == Product.id
            ).where(Favorite.user_id == user_id)
            
            results = session.execute(stmt).all()
            
            if not results:
                await callback.message.answer(
                    "üîç –í –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.\n\n"
                    "–î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏—Ö –ø–æ–∑–∂–µ!",
                    reply_markup=main_kb()
                )
                return
            
            answer_message = (
                "‚≠ê <b>–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</b> ‚≠ê\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É.\n\n"
            )
            
            for a in enumerate(results, 1):
                print(a)
            
            kb = InlineKeyboardBuilder()

            for i, (product, favorite) in enumerate(results, 1):
                answer_message += (
                    f"{i}. <b>{product.name}</b>\n"
                    f"   –ê—Ä—Ç–∏–∫—É–ª: {product.vendor_code}\n"
                    f"   –¶–µ–Ω–∞: {product.price} —Ä—É–±.\n\n"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–∞
                kb.button(
                    text=f"üëÅ –¢–æ–≤–∞—Ä #{i}", 
                    callback_data=f"view_product_{product.id}"
                )
            
            kb.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_page")
        
            kb.adjust(1)
                            
            return await callback.message.answer(
                answer_message,
                reply_markup=kb.as_markup(),
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        await callback.message.answer(
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_kb()
        )
        
# MARK: add_fav_
        
@dp.callback_query(F.data.startswith("add_fav_"))
async def add_product_to_favorites(callback: CallbackQuery):
    product_id = str(callback.data).split("_")[2]
    
    try:
        with Session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            existing = session.query(Favorite).filter(
                Favorite.user_id == callback.from_user.id,
                Favorite.product_id == product_id
            ).first()
            
            if not existing:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                fav = Favorite(
                    user_id=callback.from_user.id,
                    product_id=product_id
                )
                session.add(fav)
                session.commit()
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                stmt = select(Product).where(Product.id == product_id)
                product = session.scalars(stmt).first()
                
                if product:

                    product_info = make_product_card(product)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –≥–¥–µ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
                    await callback.message.edit_caption(
                        caption=product_info,
                        reply_markup=product_kb(product.id, is_fav=True),
                        parse_mode="HTML"
                    )
                    
                await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
            else:
                await callback.answer("‚ùó –¢–æ–≤–∞—Ä —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")

# MARK: remove_fav_

@dp.callback_query(F.data.startswith("remove_fav_"))
async def remove_from_favorites(callback: CallbackQuery):
    product_id = str(callback.data).split("_")[2]
    
    try:
        with Session() as session:
            # –ò—â–µ–º –∑–∞–ø–∏—Å—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
            fav = session.query(Favorite).filter(
                Favorite.user_id == callback.from_user.id,
                Favorite.product_id == product_id
            ).first()
            
            if fav:
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                session.delete(fav)
                session.commit()
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                stmt = select(Product).where(Product.id == product_id)
                product = session.scalars(stmt).first()
                
                if product:
                    product_info = make_product_card(product)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –≥–¥–µ —Ç–æ–≤–∞—Ä —É–∂–µ –Ω–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
                    await callback.message.edit_caption(
                        caption=product_info,
                        reply_markup=product_kb(product.id, is_fav=False),
                        parse_mode="HTML"
                    )
                    
                await callback.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
            else:
                await callback.answer("‚ùó –¢–æ–≤–∞—Ä –Ω–µ –±—ã–ª –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
# MARK: profile

@dp.callback_query(F.data == 'profile')
async def profile_page(callback: CallbackQuery):
    await callback.answer("")
    logger.info(f"Parsing user {callback.from_user.id} profile page")
    
    try:
        with Session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            stmt = select(User).where(User.telegram_id == callback.from_user.id)
            user = session.scalars(stmt).first()
            
            if not user:
                return await callback.message.answer(
                    "‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start", 
                    reply_markup=main_kb()
                )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cart_count = session.query(CartItem).filter(CartItem.user_id == callback.from_user.id).count()
            favorites_count = session.query(Favorite).filter(Favorite.user_id == callback.from_user.id).count()
            orders_count = session.query(Orders).filter(Orders.user_id == callback.from_user.id).count()
            reviews_count = session.query(Reviews).filter(Reviews.user_id == callback.from_user.id).count()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è
            profile_status = "‚≠ê –ü—Ä–µ–º–∏—É–º" if orders_count > 5 else "üîπ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            last_activity = user.created_date.strftime("%d.%m.%Y")
            account_age = (datetime.datetime.now() - user.created_date).days
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            profile_message = (
                f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
                
                f"üìã <b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
                f"‚Ä¢ –ò–º—è: {user.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"‚Ä¢ –ê–¥—Ä–µ—Å: {user.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {profile_status}\n\n"
                
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ üõí –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ: {cart_count}\n"
                f"‚Ä¢ ‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {favorites_count}\n"
                f"‚Ä¢ üì¶ –û—Ñ–æ—Ä–º–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {orders_count}\n"
                f"‚Ä¢ ‚úçÔ∏è –û—Å—Ç–∞–≤–ª–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {reviews_count}\n\n"
                
                f"‚è± <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
                f"‚Ä¢ –° –Ω–∞–º–∏ —Å: {last_activity}\n"
                f"‚Ä¢ –î–Ω–µ–π —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {account_age}\n\n"
                
                f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
            )

            
            return await callback.message.answer(
                profile_message,
                reply_markup=profile_kb(),
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return await callback.message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_kb()
        )

# MARK: states for profile

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
@dp.callback_query(F.data == "edit_name")
async def edit_name_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(ProfileForm.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.callback_query(F.data == "edit_phone")
async def edit_phone_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(ProfileForm.phone)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
@dp.callback_query(F.data == "edit_address")
async def edit_address_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(ProfileForm.address)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
        "(–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞)"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
@dp.message(ProfileForm.name)
async def process_name(message: Message, state: FSMContext):
    try:
        with Session() as session:
            user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
            if user:
                user.name = message.text
                session.commit()
                await message.answer(
                    "‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                    reply_markup=InlineKeyboardBuilder().button(
                        text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"
                    ).as_markup()
                )
            else:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏.")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(ProfileForm.phone)
async def process_phone(message: Message, state: FSMContext):
    phone = message.text
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    import re
    if not re.match(r'^\+?[0-9]{10,12}$', phone):
        return await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:",
            reply_markup=InlineKeyboardBuilder().button(
                text="–û—Ç–º–µ–Ω–∞", callback_data="profile"
            ).as_markup()
        )
    
    try:
        with Session() as session:
            user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
            if user:
                user.phone_number = phone
                session.commit()
                await message.answer(
                    "‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                    reply_markup=InlineKeyboardBuilder().button(
                        text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"
                    ).as_markup()
                )
            else:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    
    await state.clear()

# MARK: cart

@dp.callback_query(F.data == 'cart')
async def cart_page(callback: CallbackQuery):
    await callback.answer('')
    user_id: int = callback.from_user.id
    
    try:
        with Session() as session:
            stmt = select(Product).join(CartItem).where(CartItem.user_id == user_id)
            products = session.scalars(stmt).all()
            
            if not products:
                await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", reply_markup=main_kb())
                return
            
            message = "–¢–æ–≤–∞—Ä—ã –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ:\n\n"
            for product in products:
                message += f"üîπ {product.name} - {product.price} —Ä—É–±.\n"
            
            await callback.message.answer(message)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")


# MARK: orders

@dp.callback_query(F.data == 'orders')
async def orders_list(callback: CallbackQuery):
    await callback.answer('')
    user_id: int = callback.from_user.id
    
    try:
        with Session() as session:
            stmt = select(Orders, Product).join(
                Product, Orders.product_id == Product.id
            ).where(Orders.user_id == user_id).order_by(Orders.created_date.desc())
            
            results = session.execute(stmt).all()
            
            if not results:
                return await callback.message.answer(
                    "üì≠ <b>–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç</b>\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.\n"
                    "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!",
                    parse_mode="HTML",
                    reply_markup=main_kb()
                )
            

            orders_by_date = {}
            total_spent = 0
            
            for order, product in results:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                order_date = order.created_date.strftime('%d.%m.%Y')
                if order_date not in orders_by_date:
                    orders_by_date[order_date] = []
                
                orders_by_date[order_date].append((order, product))
                total_spent += order.summ
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
            message = (
                "üì¶ <b>–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤</b>\n\n"
                f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>{len(results)}</b>\n"
                f"–ù–∞ —Å—É–º–º—É: <b>{total_spent:.2f} —Ä—É–±.</b>\n\n"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º HTML
            return await callback.message.answer(
                message,
                reply_markup=orders_kb(orders_by_date),
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return await callback.message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_kb()
        )

# # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
# def get_order_status(order):
#     # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
#     # –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     days_since_order = (datetime.datetime.now() - order.created_date).days
    
#     if days_since_order < 1:
#         return "‚úÖ –ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É"
#     elif days_since_order < 3:
#         return "üöö –í –ø—É—Ç–∏"
#     elif days_since_order < 5:
#         return "üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω"
#     else:
#         return "‚úì –ó–∞–≤–µ—Ä—à–µ–Ω"
        
@dp.callback_query(F.data.startswith("order_details_"))
async def order_details_handler(callback: CallbackQuery):
    await callback.answer('')
    order_id = str(callback.data).split("_")[2]
    
    try:
        with Session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            stmt = select(Orders, Product, User).join(
                Product, Orders.product_id == Product.id
            ).join(
                User, Orders.user_id == User.telegram_id
            ).where(Orders.id == order_id)
            
            result = session.execute(stmt).first()
            
            if not result:
                return await callback.message.answer(
                    "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                    reply_markup=main_kb()
                )
            
            order, product, user = result
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
            order_date = order.created_date.strftime('%d.%m.%Y %H:%M')
            estimated_delivery = (order.created_date + datetime.timedelta(days=5)).strftime('%d.%m.%Y')
            
            message = (
                f"üßæ <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n\n"
                
                f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:</b>\n"
                f"‚Ä¢ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order_date}\n"
                f"‚Ä¢ –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: {estimated_delivery}\n\n"
                
                f"üõç <b>–¢–æ–≤–∞—Ä:</b>\n"
                f"‚Ä¢ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {product.name}\n"
                f"‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª: {product.vendor_code}\n"
                f"‚Ä¢ –¶–µ–Ω–∞ –∑–∞ –µ–¥.: {product.price:.2f} —Ä—É–±.\n"
                f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.quantity} —à—Ç.\n"
                f"‚Ä¢ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order.summ:.2f} —Ä—É–±.\n\n"
                
                f"üì¶ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ:</b>\n"
                f"‚Ä¢ –ê–¥—Ä–µ—Å: {user.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {user.name or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                
                f"–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∑–∞–∫–∞–∑—É —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–∫–∞–∑–æ–º
            kb = InlineKeyboardBuilder()
            
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            if (datetime.datetime.now() - order.created_date).days < 1:
                kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_order_{order.id}")
            
            kb.button(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"repeat_order_{order.id}")
            kb.button(text="üì± –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact_manager")
            kb.button(text="üîô –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤", callback_data="orders")
            kb.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_page")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            kb.adjust(1)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
            return await callback.message.answer_photo(
                photo=product.image,
                caption=message,
                reply_markup=kb.as_markup(),
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ {order_id}: {e}")
        return await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_kb()
        )
    
# MARK: help
@dp.callback_query(F.data == 'help')
async def help_page(callback: CallbackQuery):
    await callback.answer("")
    
    help_message = (
        "üÜò <b>–¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏ MDM</b> üÜò\n\n"
        
        "–£ –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ú—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!\n\n"
        
        "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n"
        "8 (800) 123-45-67 (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ)\n\n"
        
        "‚úâÔ∏è <b>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:</b>\n"
        "support@mdm-store.ru\n\n"
        
        "üí¨ <b>Telegram –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n"
        "@mdm_support\n\n"
        
        "üìù <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n"
        "‚Ä¢ –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?\n"
        "‚Ä¢ –ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã?\n"
        "‚Ä¢ –ö–∞–∫ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑?\n"
        "‚Ä¢ –£—Å–ª–æ–≤–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞\n\n"
        
        "‚è± <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –æ—Ñ–∏—Å–∞:</b>\n"
        "–ü–Ω-–ü—Ç: 9:00 - 18:00\n"
        "–°–±-–í—Å: –≤—ã—Ö–æ–¥–Ω—ã–µ\n\n"
        
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ –Ω–∏–∂–µ üëá"
    )
    
    return await callback.message.edit_text(
        help_message, 
        parse_mode="HTML",
        reply_markup=help_kb(callback.from_user.id)
    )
    
# MARK: main

async def main() -> None:
    create_tables()
    bot = Bot(token=settings.BOT_TOKEN)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(filename='mdm.log', level=logging.INFO, encoding='utf-8')
    logger.info('Started')
    tprint("MDMBOT")
    asyncio.run(main())