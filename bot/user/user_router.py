from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from bot.dao.dao import FavoriteDAO, ProductDao, UserDAO
from bot.user.kbs import main_user_kb, product_kb
from bot.user.schemas import TelegramIDModel, UserModel

user_router = Router()

class SearchState(StatesGroup):
    user_search_request = State()
    
@user_router.message(CommandStart())
async def cmd_start(message: Message, session_with_commit: AsyncSession):
    user_id = message.from_user.id
    user_info = await UserDAO.find_one_or_none(
        session=session_with_commit,
        filters=TelegramIDModel(telegram_id=user_id)
    )

    if user_info:
        return await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            reply_markup=main_user_kb()
        )

    values = UserModel(
        telegram_id=user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )
    await UserDAO.add(session=session_with_commit, values=values)
    await message.answer("üéâ <b>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!</b>. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
                         reply_markup=main_user_kb())


@user_router.callback_query(F.data == 'search')
async def search_products(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ <b>–∞—Ä—Ç–∏–∫—É–ª</b> —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä.')

    await state.set_state(SearchState.user_search_request)

    await callback.answer('')

@user_router.message(SearchState.user_search_request)
async def proces_user_search(message: Message, state: FSMContext, session_without_commit: AsyncSession):
    await state.clear()

    vendor_code = message.text.strip()
    
    product = await ProductDao.find_one_or_none_by_vendor_code(vendor_code, session_without_commit)

    if product:
        response = (
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product.name}\n\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product.description}\n\n"
            f"<b>–¶–µ–Ω–∞:</b> {product.price}‚ÇΩ"
        )
        await message.answer(text=response, reply_markup=product_kb(product_id=product.id, price=product.price))
    else:
        await message.answer(text="‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_user_kb())
        
@user_router.callback_query(F.data == 'favorites')
async def show_favorites(callback: CallbackQuery, session_without_commit: AsyncSession):
    user_id = callback.from_user.id

    user = await UserDAO.find_one_or_none(
        session=session_without_commit,
        filters=TelegramIDModel(telegram_id=user_id)
    )

    if not user:
        return await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    favorites = await FavoriteDAO.get_user_favorites(user.id, session=session_without_commit)

    if not favorites:
        return await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=main_user_kb())

    for fav in favorites:
        product = await ProductDao.find_one_or_none_by_id(fav.product_id, session=session_without_commit)
        if product:
            text = f"<b>{product.name}</b>\n{product.description}\n–¶–µ–Ω–∞: {product.price} BYN"
            await callback.message.answer(
                text,
                reply_markup=product_kb(product.id, product.price, is_favorite=True)
            )
            

@user_router.callback_query(F.data.startswith("addfav_"))
async def add_to_favorites(callback: CallbackQuery, session_with_commit: AsyncSession):
    product_id = int(callback.data.split("_")[1])
    user_telegram_id = callback.from_user.id

    user = await UserDAO.find_one_or_none(session=session_with_commit, filters=TelegramIDModel(telegram_id=user_telegram_id))
    if not user:
        return await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await FavoriteDAO.add_favorite(user.id, product_id, session=session_with_commit)
    await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§Ô∏è")

    # –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
    product = await ProductDao.find_one_or_none_by_id(product_id, session=session_with_commit)
    if product:
        text = f"<b>{product.name}</b>\n{product.description}\n–¶–µ–Ω–∞: {product.price} BYN"
        await callback.message.edit_text(text, reply_markup=product_kb(product.id, product.price, is_favorite=True))


@user_router.callback_query(F.data.startswith("removefav_"))
async def remove_from_favorites(callback: CallbackQuery, session_with_commit: AsyncSession):
    product_id = int(callback.data.split("_")[1])
    user_telegram_id = callback.from_user.id

    user = await UserDAO.find_one_or_none(session=session_with_commit, filters=TelegramIDModel(telegram_id=user_telegram_id))
    if not user:
        return await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await FavoriteDAO.remove_favorite(user.id, product_id, session=session_with_commit)
    await callback.answer("–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ üíî")

    product = await ProductDao.find_one_or_none_by_id(product_id, session=session_with_commit)
    if product:
        text = f"<b>{product.name}</b>\n{product.description}\n–¶–µ–Ω–∞: {product.price} BYN"
        await callback.message.edit_text(text, reply_markup=product_kb(product.id, product.price, is_favorite=False))
